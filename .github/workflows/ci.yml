on:
  push:
    tags:
      # Full version
      - "[0-9]+.[0-9]+.[0-9]+"
      # Prerelease version
      - "[0-9]+.[0-9]+.[0-9]+-*"

  pull_request:
    branches:
      # Trigger on pull requests into main
      - main
    types: [ opened, synchronize ]

name: Continuous integration

jobs:
  rust_matrix:
    # Outputs the strategy matrix to be used in other jobs
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.rust.outputs.matrix }}
    steps:
      - name: Define rust matrix
        id: rust
        run: |
          echo "matrix={'rust': ['stable', '1.65.0']}" >> $GITHUB_OUTPUT
  lint-and-test:
    name: Check
    runs-on: ubuntu-latest
    needs: rust_matrix
    strategy:
      matrix: ${{ fromJson(needs.rust_matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.8.0
      - run: rustup component add rustfmt
      - run: rustup component add clippy
      - run: |
          cargo check
      - run: |
          cargo fmt --all -- --check
      - run: |
          cargo clippy -- -D warnings
      - run: |
          cargo test

  tarpaulin:
    name: Tarpaulin
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.8.0
      - run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --out xml
      - uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./cobertura.xml
          verbose: true

  msrv:
    name: Find msrv
    runs-on: ubuntu-latest
    # Only run on pull requests starting with `renovate/`
    if: startsWith(github.head_ref, 'renovate/')
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.8.0
      - run: |
          cargo install cargo-msrv
          cargo msrv find

  musl:
    name: Musl
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          target: x86_64-unknown-linux-musl
          toolchain: stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.8.0
      - run: |
          cargo run --example docker --target x86_64-unknown-linux-musl

  publish:
    runs-on: ubuntu-latest
    needs:
      - lint-and-test
      - musl
      - tarpaulin
    steps:
      - uses: actions/checkout@v4
      - name: Install rust
        uses: dtolnay/rust-toolchain@master
        with:
            toolchain: stable
      - name: Publish to crates.io on tags
        if: startsWith(github.ref, 'refs/tags/')
        run:
          cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.PUBLISH_SECRET }}
      - name: Dry-run publish on non-tags
        if: startsWith(github.ref, 'refs/tags/') != true
        run:
          cargo publish --dry-run
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.PUBLISH_SECRET }}
